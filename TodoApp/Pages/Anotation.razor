@page "/"

@using System.Web;
@using System.Diagnostics
@using TodoApp.Data;
@using TodoApp.Intefaces;
@using TodoApp.Views;

@inject NavigationManager NavManager

<div class="separator">
    <button type="button" @onclick="TogglePicker">@dataSelecionada?.ToString("dd/MM/yyyy")</button>
</div>

<div hidden="@hidePicker">

    <WDatePicker Title="Select a date"
                 DateChanged="(data) => ItemClicked(data)"
                 MonthChanged="@((DateTime? date) => {newMonth = date.Value; dias = new List<DateTime>(){new DateTime(date.Value.Year,date.Value.Month, random.Next(1, 30))};})"
                 MarkedDays="@dias"
                 DateFormat="dd/MM/yyyy" />

</div>


<div style="background-image: url('images/bg-text.svg');
    /* background-image: linear-gradient(#6f6f6f 1px, transparent 1px); */
    background-size: 3px 24px;">
    @if (string.IsNullOrEmpty(dailyNote.Text))
    {
        <MudCard @onclick="OnClickCardClick" Style="@heightCard">
            <MudCardContent>
                <MudText>No notes</MudText>
            </MudCardContent>
        </MudCard>
    }
    else
    {

        <MudCard @onclick="OnClickCardClick" Style="@heightCard">
            <MudCardContent>
                <MudText>
                    @HtmlHelper.RenderMultiline(texto)
                </MudText>
            </MudCardContent>
        </MudCard>
    }
</div>

@code {
    private bool hidePicker = true;

    private DailyNote dailyNote;
    private string texto;
    private string heightCard = "min-height: calc(100vh - 86px); ";
    DateTime? dataSelecionada;

    private DateTime newMonth;
    private List<DateTime> dias;

    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        if (App._notesRepo.dailyNote == null)
        {
            dataSelecionada = DateTime.Today;

            dailyNote = new();
            dailyNote.Time = dataSelecionada.Value;
            App._notesRepo.dailyNote = dailyNote;
        }
        else
        {
            dailyNote = App._notesRepo.dailyNote;
            dataSelecionada = dailyNote.Time;
        }
        heightCard = "min-height: calc(100vh - 86px); ";
        await ViewNote(dataSelecionada.Value);
    }

    private void TogglePicker()
    {
        this.hidePicker = !hidePicker;

        if (hidePicker)
            heightCard = "min-height: calc(100vh - 86px)";
        else
            heightCard = "min-height: calc(100vh - 315px)";
    }

    private void ItemClicked(DateTime? data)
    {
        dataSelecionada = data.Value;
        App._notesRepo.dailyNote.Time = dataSelecionada.Value;
        _ = ViewNote(dataSelecionada.Value);
    }

    async Task ViewNote(DateTime date)
    {
        dailyNote = await App._notesRepo.GetNoteAsync(date);
        if (dailyNote.Id == 0)
        {
            dailyNote.Time = date;
        }
        texto = dailyNote.Text;
        App._notesRepo.dailyNote = dailyNote;
        StateHasChanged();

    }
    private async void OnClickCardClick()
    {
        try
        {
            NavManager.NavigateTo("/notewrite");
        }
        catch (Exception ex)
        {
            CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();

            string text = "Um erro aconteceu :/ \n" + ex.Message;
            var duration = CommunityToolkit.Maui.Core.ToastDuration.Short;
            double fontSize = 14;

            var toast = CommunityToolkit.Maui.Alerts.Toast.Make(text, duration, fontSize);

            await toast.Show(cancellationTokenSource.Token);
        }
    }

    public static class HtmlHelper
    {
        public static MarkupString RenderMultiline(string textWithLineBreaks)
        {
            var encodedLines = (textWithLineBreaks ?? string.Empty)
                .Split(new char[] { '\r', '\n' })
                .Select(line => HttpUtility.HtmlEncode(line))
                .ToArray();

            return (MarkupString)string.Join("<br />", encodedLines);
        }
    }
}